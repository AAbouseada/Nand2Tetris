// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// Mux Closest to instruction input
	Mux16(a=instruction,b=ALUout,sel=instruction[15],out=MuxAout);
	
	// cinst = !instruction[15]
	Not(in=instruction[15], out=Cinst);
	// (Cinst || d1) = Ainst
	Or(a=Cinst, b=instruction[5], out=Ainst);
	// A Register
	ARegister(in=MuxAout,load=Ainst,out=ARegOut,out[0..14]=addressM);
	
	// Mux Closest to ALU
	Mux16(a=ARegOut,b=inM,sel=instruction[12],out=MUX2out);
	// (d2 && i) = loadD
	And(a=instruction[4], b=instruction[15], out=loadD);
	// D-Register
	DRegister(in=ALUout,load=loadD,out=DRegOut);

	// ALU
	ALU(x=DRegOut,y=MUX2out,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=ALUout,zr=ZRF,ng=NGF);
	
	//write to memory writeM = d3
	And(a=instruction[3],b=instruction[15],out=writeM);	
	
	// (NGF || ZRF) = LTE
	Or(a=NGF,b=ZRF,out=LTE);
	// (!LTE) = GT
	Not(in=LTE,out=GT);

	// (PF && j3) = JGT
	And(a=instruction[0],b=GT,out=JGT);
	// (ZRF && j2) = JEQ
	And(a=instruction[1],b=ZRF,out=JEQ);
	// (NGF && j1) = JLT
	And(a=instruction[2],b=NGF,out=JLT);
	// (JLT || JEQ) = JLE
	Or(a=JLT,b=JEQ,out=JLE);
	// (JLE || JGT) = JMP
	Or(a=JLE,b=JGT,out=JMP);
	// (i && JMP) = loadPC
	And(a=instruction[15],b=JMP,out=loadPC);
	// incPC = !(loadPC)
	Not(in=loadPC,out=incPC);
	// Program Counter
	PC(in=ARegOut,load=loadPC,inc=incPC,reset=reset,out[0..14]=pc); 
}
